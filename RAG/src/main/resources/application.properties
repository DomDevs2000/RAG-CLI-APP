
spring.application.name=RAG
spring.ai.ollama.base-url=${OLLAMA_BASE_URL:http://localhost:11434}
spring.ai.ollama.chat.options.model=granite3.3
spring.ai.ollama.chat.options.temperature=0.4
spring.ai.ollama.embedding.options.model=nomic-embed-text

spring.datasource.url=jdbc:postgresql://localhost:${POSTGRES_PORT:5433}/${POSTGRES_DB:rag_api}
spring.datasource.username=${POSTGRES_USER:postgres}
spring.datasource.password=${POSTGRES_PASSWORD:postgres}
spring.datasource.driverClassName=org.postgresql.Driver

spring.ai.vectorstore.pgvector.index-type=HNSW
spring.ai.vectorstore.pgvector.distance-type=COSINE_DISTANCE
spring.ai.vectorstore.pgvector.dimension=768
spring.ai.vectorstore.pgvector.hnsw-ef-construction=200
spring.ai.vectorstore.pgvector.hnsw-max-connections=16
spring.ai.vectorstore.pgvector.hnsw-ef-search=40
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} - %msg%n
spring.main.banner-mode=off



#logging.level.root=OFF

# logging.level.root=ERROR
# logging.level.org.springframework.web=ERROR

#logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} - %msg%n
#
#spring.main.banner-mode=off





# Server timeouts
server.servlet.session.timeout=30m
server.connection-timeout=30m
server.tomcat.connection-timeout=30m
server.tomcat.max-wait=30m
spring.mvc.async.request-timeout=30m

# Database setup (handled by init.sql in Docker):
# CREATE EXTENSION IF NOT EXISTS vector;
# CREATE EXTENSION IF NOT EXISTS hstore;
# CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
# 
# CREATE TABLE IF NOT EXISTS vector_store (
#     id uuid DEFAULT uuid_generate_v4() PRIMARY KEY,
#     content text,
#     metadata json,
#     embedding vector(768)  -- Updated for nomic-embed-text model
# );
# 
# CREATE INDEX IF NOT EXISTS vector_store_embedding_idx 
# ON vector_store USING HNSW (embedding vector_cosine_ops);

