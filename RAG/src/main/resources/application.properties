
spring.application.name=RAG
spring.ai.openai.api-key=${OPENAI_API_KEY}
spring.ai.openai.chat.options.model=gpt-4o-mini
spring.ai.openai.chat.options.temperature=0.4
spring.datasource.url=jdbc:postgresql://mscproject-rag-pgvector.chuygmsa0ngy.eu-west-2.rds.amazonaws.com/rag_api
spring.datasource.username=postgres
spring.datasource.password=${POSTGRES_PASS}
spring.ai.vectorstore.pgvector.index-type=HNSW
spring.ai.vectorstore.pgvector.distance-type=COSINE_DISTANCE
spring.ai.vectorstore.pgvector.dimension=1536
spring.datasource.driverClassName=org.postgresql.Driver
spring.ai.openai.embedding.enabled=true
spring.ai.openai.embedding.model=text-embedding-ada-002
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} - %msg%n
spring.main.banner-mode=off



#logging.level.root=OFF

# logging.level.root=ERROR
# logging.level.org.springframework.web=ERROR

#logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} - %msg%n
#
#spring.main.banner-mode=off





# Server timeouts
server.servlet.session.timeout=30m
server.connection-timeout=30m
server.tomcat.connection-timeout=30m
server.tomcat.max-wait=30m
spring.mvc.async.request-timeout=30m

#create extension if not exists vector;
#create extension if not exists hstore;
#create extension if not exists "uuid-ossp";

#create table if not exists vector_store (
#	id uuid default uuid_generate_v4() primary key,
#	content text,
#	metadata json,
#	embedding vector(1536)
#);

#CREATE INDEX ON vector_store USING HNSW (embedding vector_cosine_ops);

